# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Make release

on:
  workflow_dispatch:

jobs:

  build:
    
    environment: release

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Project_Directory: NiL.JS
      Solution_Name: $Project_Directory/NiL.JS.csproj
      Test_Project_Path: Tests/Tests.csproj
      Nuget_Pack_Output_Directory: nuget

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true

    # Install the .NET Core 3.1
    - name: Install .NET Core 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x

    # Install the .NET Core 5.0
    - name: Install .NET Core 5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Install the .NET Core 6.0
    - name: Install .NET Core 6.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Install the .NET Core 7.0
    - name: Install .NET Core 7.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 7.0.x
        
    - name: Install .NET Core 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.3.1

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the snk
      run: |
        $snk_byte = [System.Convert]::FromBase64String("${{ secrets.SNK_KEY }}")
        $certificatePath = Join-Path -Path $env:Project_Directory -ChildPath keys.snk
        [IO.File]::WriteAllBytes("$certificatePath", $snk_byte)

    - name: Run TinyT4
      run: |
        cd Tests
        dotnet run --project ..\Utility\tiny-t4\ --framework net7.0

    - name: Test .NET Core 7.0
      run: |
        cd Tests
        dotnet test -c Release -property:TargetFramework=net7.0 -property:SignAssembly=false -property:PublicSign=false

    - name: Build release message
      run: |
        ./buildReleaseMessage.ps1 > ./Release.md
    
    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: |
        $VERSION=${{ vars.VERSION }}
        echo $VERSION
        ./pack.ps1

    # Remove the pfx
    - name: Remove the snk
      run: Remove-Item -path NiL.JS\keys.snk

    # Upload the nuget package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: NuGet Package
        path: ${{ env.Nuget_Pack_Output_Directory }}

    - name: Make release tag
      id: tag
      run: |
        echo $VERSION
        $TAG="${{ vars.VERSION }}.$(git rev-list --count origin/develop)"
        echo "tag=$TAG" >> $env:GITHUB_OUTPUT
        echo $GITHUB_OUTPUT
        echo $env:GITHUB_OUTPUT
        git tag $TAG
        git push --tags

    - name: Make release ${{ steps.tag.outputs.tag }}
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.tag.outputs.tag }}
        name: ${{ steps.tag.outputs.tag }}
        artifacts: ${{ env.Nuget_Pack_Output_Directory }}/*
        bodyFile: ./Release.md

    - name: Upload package to nuget.org
      run: dotnet nuget push nuget/NiL.JS.${{ steps.tag.outputs.tag }}.nupkg -k ${{ secrets.NUGET_ORG_TOKEN }} -s https://nuget.org/
        